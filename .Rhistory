sd = sd(!!sym(col_response)))
# create plot
ggplot(summary) +
geom_pointrange(aes(x = !!sym(col_explanatory),
y = mean,
ymin = mean-sd,
ymax = mean+sd,
color = !!sym(col_explanatory)),
size = 1.2) +
scale_color_manual(values = colors) +
labs(x = "x-axis title",
y = "y-axis title") +
theme_classic() +
theme(legend.position = "none")
# test relationship
aov(reformulate(col_explanatory, col_response),
data = lichen) %>%
summary
# specify the column that contains your explanatory (independent) variable
col_explanatory <- "sample_location"
# specify the column that contains your response (dependent) variable
col_response <- "coverage_total"
summary <- lichen %>%
group_by(!!sym(col_explanatory)) %>%
summarize(mean = mean(!!sym(col_response)),
sd = sd(!!sym(col_response)))
# create plot
ggplot(summary) +
geom_pointrange(aes(x = !!sym(col_explanatory),
y = mean,
ymin = mean-sd,
ymax = mean+sd,
color = !!sym(col_explanatory)),
size = 1.2) +
scale_color_manual(values = colors) +
labs(x = "x-axis title",
y = "y-axis title") +
theme_classic() +
theme(legend.position = "none")
# test relationship
aov(reformulate(col_explanatory, col_response),
data = lichen) %>%
summary
df <- lichen %>%
select(coverage_north, coverage_east, coverage_south, coverage_west)
View(df)
df <- lichen %>%
select(coverage_north, coverage_east, coverage_south, coverage_west) %>%
pivot_longer(names_to = tree_side, values_to = coverage, 1:4)
df <- lichen %>%
select(coverage_north, coverage_east, coverage_south, coverage_west) %>%
pivot_longer(names_to = "tree_side", values_to = "coverage", 1:4)
View(df)
df <- lichen %>%
select(coverage_north, coverage_east, coverage_south, coverage_west) %>%
pivot_longer(names_to = "tree_side", values_to = "coverage", 1:4) %>%
separate(tree_side, into = c("tmp", "direction"), sep = "_")
head(df)
summary <- lichen %>%
select(coverage_north, coverage_east, coverage_south, coverage_west) %>%
pivot_longer(names_to = "tree_side", values_to = "coverage", 1:4) %>%
separate(tree_side, into = c("tmp", "direction"), sep = "_") %>%
select(-tmp) %>%
group_by(direction) %>%
summarize(mean = mean(coverage),
sd = sd(coverage))
View(summary)
# create plot
ggplot(summary) +
geom_pointrange(aes(x = direction,
y = mean,
ymin = mean-sd,
ymax = mean+sd,
color = direction),
size = 1.2) +
scale_color_manual(values = colors) +
labs(x = "x-axis title",
y = "y-axis title") +
theme_classic() +
theme(legend.position = "none")
# create tidy data set with coverage by direction
df <- lichen %>%
select(coverage_north, coverage_east, coverage_south, coverage_west) %>%
pivot_longer(names_to = "tree_side", values_to = "coverage", 1:4) %>%
separate(tree_side, into = c("tmp", "direction"), sep = "_") %>%
select(-tmp)
# calculate summary stats
summary <- df %>%
group_by(direction) %>%
summarize(mean = mean(coverage),
sd = sd(coverage))
# create plot
ggplot(summary) +
geom_pointrange(aes(x = direction,
y = mean,
ymin = mean-sd,
ymax = mean+sd,
color = direction),
size = 1.2) +
scale_color_manual(values = colors) +
labs(x = "x-axis title",
y = "y-axis title") +
theme_classic() +
theme(legend.position = "none")
# test relationship
aov(direction ~ coverage,
data = df) %>%
summary
View(df)
head(df)
# test relationship
aov(direction ~ coverage,
data = df) %>%
summary()
aov(direction ~ coverage,
data = df)
View(df)
# test relationship
aov(coverage ~ direction,
data = df) %>%
summary()
#| label: setup
#| eval: false
#| message: false
#| error: false
#| warning: false
# load libraries for reporting
library(knitr)
# load libraries for data import
library(readr)
library(here)
library(janitor)
# load libraries for data wrangling
library(dplyr)
library(tidyr)
library(tibble)
# load libraries for plotting
library(ggplot2)
library(ggthemes)
# load library for stats
library(infer)
set.seed(42)
# read data set
lichen <- read_delim("data/NEON-lichen-wet-deposition.tsv", delim = "\t")
# overview
glimpse(lichen)
# specify the column that contains your explanatory (independent) variable
col_explanatory <- "PercentCanopyCover"
x_axis_title <- "Canopy coverage (percent)"
# specify the column that contains your response (dependent) variable
col_response <- "LichenIndex"
y_axis_title <- "Lichen abundance"
# create plot
ggplot(lichen,
aes(x = !!sym(col_explanatory),
y = !!sym(col_response))) +
stat_smooth(method = "lm") +
geom_point() +
labs(x = x_axis_title,
y = y_axis_title) +
theme_classic()
# test relationship
lm(formula = reformulate(col_response, col_explanatory),
data = lichen) %>%
summary()
# test relationship
lm(formula = reformulate(col_explanatory, col_response),
data = lichen) %>%
summary()
glimpse(lichen)
# specify the column that contains your explanatory (independent) variable
col_explanatory <- "NLCDC"
x_axis_title <- "Land cover classification (NLCDC 2016)"
# specify the column that contains your response (dependent) variable
col_response <- "LichenIndex"
y_axis_title <- "Lichen relative abundance"
summary <- lichen %>%
group_by(!!sym(col_explanatory)) %>%
summarize(mean = mean(!!sym(col_response)),
sd = sd(!!sym(col_response)))
View(summary)
# create plot
ggplot(summary) +
geom_pointrange(aes(x = !!sym(col_explanatory),
y = mean,
ymin = mean-sd,
ymax = mean+sd,
color = !!sym(col_explanatory)),
size = 1.2) +
scale_color_manual(values = colors) +
labs(x = "x-axis title",
y = "y-axis title") +
theme_classic() +
theme(legend.position = "none")
# create plot
ggplot(summary) +
geom_pointrange(aes(x = !!sym(col_explanatory),
y = mean,
ymin = mean-sd,
ymax = mean+sd,
color = !!sym(col_explanatory)),
size = 1.2) +
labs(x = "x-axis title",
y = "y-axis title") +
theme_classic() +
theme(legend.position = "none")
# create plot
ggplot(summary) +
geom_pointrange(aes(x = !!sym(col_explanatory),
y = mean,
ymin = mean-sd,
ymax = mean+sd,
color = !!sym(col_explanatory)),
size = 1.2) +
labs(x = "x-axis title",
y = "y-axis title") +
coord_flip() +
theme_classic() +
theme(legend.position = "none")
# test relationship
aov(reformulate(col_explanatory, col_response),
data = lichen) %>%
summary
glimpse(lichen)
#| label: fig-wet-deposition-I
#| fig-cap: "Figure title."
#| message: false
#| error: false
#| warning: false
# MODIFY THIS SECTION ----
# specify the column that contains your explanatory (independent) variable
col_explanatory <- "pH"
x_axis_title <- "Precipitation pH"
# specify the column that contains your response (dependent) variable
col_response <- "LichenIndex"
y_axis_title <- "Lichen abundance"
# DO NOT MAKE MODIFICATIONS BELOW HERE ----
# create plot
ggplot(lichen,
aes(x = !!sym(col_explanatory),
y = !!sym(col_response))) +
stat_smooth(method = "lm") +
geom_point() +
labs(x = x_axis_title,
y = y_axis_title) +
theme_classic()
# test relationship
lm(formula = reformulate(col_explanatory, col_response),
data = lichen) %>%
summary()
glimpse(lichen)
# specify the column that contains your explanatory (independent) variable
col_explanatory <- "precipSulfate"
x_axis_title <- "wet deposition (sulfates)"
# specify the column that contains your response (dependent) variable
col_response <- "LichenIndex"
y_axis_title <- "Lichen abundance"
# create plot
ggplot(lichen,
aes(x = !!sym(col_explanatory),
y = !!sym(col_response))) +
stat_smooth(method = "lm") +   geom_point() +
labs(x = x_axis_title,
y = y_axis_title) +
theme_classic()
# test relationship
lm(formula = reformulate(col_explanatory, col_response),
data = lichen) %>%
summary()
#| label: tbl-summary-table-lichen-coverage
#| tbl-cap: "Descriptive statistics of lichen coverage summed across north, south, east, and west side of the tree for each sample location."
#| message: false
#| error: false
#| warning: false
# MODIFY THIS SECTION ----
# specify column name to group data & calculate descriptive stats
col_grp <- "sample_location"
# specify  column that contains data to summarize (response variable)
col_response <- "coverage_total"
# DO NOT MAKE MODIFICATIONS BELOW HERE ----
# calculate summary stats for continuous variable
lichen %>%
group_by(!!sym(col_grp)) %>%
summarize(mean = mean(!!sym(col_response)),
sd = sd(!!sym(col_response)),
min = min(!!sym(col_response)),
max = max(!!sym(col_response))) %>%
kable()
#| label: fig-map
#| fig-cap: "Sample Area Saint Anselm Campus Lichen survey. Individual dots represent sampled trees. Colors correspond to sample areas."
#| message: false
#| error: false
#| warning: false
lichen <- read_delim("data/lichen-survey_dummy.tsv") %>%
clean_names()
# get lat/long for plot boundaries
min_lat <- min(lichen$latitude)
max_lat <- max(lichen$latitude)
min_long <- min(lichen$longitude)
max_long <- max(lichen$longitude)
# pull major street features
big_streets <- opq(bbox = c(min_long-0.05, min_lat-0.05, max_long+0.05, max_lat+0.05)) %>%
add_osm_feature(key = "highway",
value = c("motorway", "primary", "motorway_link", "primary_link")) %>%
osmdata_sf()
# pull medium sized streets
med_streets <- opq(bbox = c(min_long-0.05, min_lat-0.05, max_long+0.05, max_lat+0.05)) %>%
add_osm_feature(key = "highway",
value = c("secondary", "tertiary", "secondary_link", "tertiary_link")) %>%
osmdata_sf()
# pull small streets
small_streets <- opq(bbox = c(min_long-0.05, min_lat-0.05, max_long+0.05, max_lat+0.05)) %>%
add_osm_feature(key = "highway",
value = c("residential", "living_street",
"unclassified",
"service", "footway")) %>%
osmdata_sf()
# pull rivers
rivers <- opq(bbox = c(min_long-0.05, min_lat-0.05, max_long+0.05, max_lat+0.05)) %>%
add_osm_feature(key = "waterway", value = "river") %>%
osmdata_sf()
# pull railways
railway <- opq(bbox = c(min_long-0.05, min_lat-0.05, max_long+0.05, max_lat+0.05)) %>%
add_osm_feature(key = "railway", value="rail") %>%
osmdata_sf()
# compile plot
ggplot() +
geom_sf(data = rivers$osm_lines,
inherit.aes = FALSE,
color = "steelblue",
size = .8,
alpha = .3) +
geom_sf(data = railway$osm_lines,
inherit.aes = FALSE,
color = "black",
size = .2,
linetype="dotdash",
alpha = .5) +
geom_sf(data = med_streets$osm_lines,
inherit.aes = FALSE,
color = "black",
size = 1.5,
alpha = 1) +
geom_sf(data = small_streets$osm_lines,
inherit.aes = FALSE,
color = "#666666",
size = 1,
alpha = 1) +
geom_sf(data = big_streets$osm_lines,
inherit.aes = FALSE,
color = "black",
size = 2,
alpha = 1) +
coord_sf(xlim = c(min_long-0.0025, max_long+0.0025),
ylim = c(min_lat-0.001, max_lat+0.001),
expand = FALSE) +
geom_point(data = lichen,
aes(x = longitude, y = latitude, color = sample_location),
size = 1.5, alpha = 1) +
scale_color_manual(values = c("darkgreen", "cyan", "purple",
"darkorange", "gold", "darkred")) +
theme_bw() +
theme(legend.position = "bottom")
ggsave("results/sample-locations.jpg", dpi = 300)
# pick a set of colors (you have up 6 sample locations)
colors <- c("darkgreen", "cyan", "purple",
"darkorange", "gold", "darkred",
"darkblue", "pink")
#| label: tbl-summary-table-lichen-coverage
#| tbl-cap: "Descriptive statistics of lichen coverage summed across north, south, east, and west side of the tree for each sample location."
#| message: false
#| error: false
#| warning: false
# MODIFY THIS SECTION ----
# specify column name to group data & calculate descriptive stats
col_grp <- "sample_location"
# specify  column that contains data to summarize (response variable)
col_response <- "coverage_total"
# DO NOT MAKE MODIFICATIONS BELOW HERE ----
# calculate summary stats for continuous variable
lichen %>%
group_by(!!sym(col_grp)) %>%
summarize(mean = mean(!!sym(col_response)),
sd = sd(!!sym(col_response)),
min = min(!!sym(col_response)),
max = max(!!sym(col_response))) %>%
kable()
#| label: fig-continuous-continuous-I
#| fig-cap: "Relationship of bark pH and overall lichen abundance."
#| message: false
#| error: false
#| warning: false
# MODIFY THIS SECTION ----
# specify the column that contains your explanatory (independent) variable
col_explanatory <- "bark_ph"
x_axis_title <- "Bark pH"
# specify the column that contains your response (dependent) variable
col_response <- "coverage_total"
y_axis_title <- "total lichen coverage"
# DO NOT MAKE MODIFICATIONS BELOW HERE ----
# create plot
ggplot(lichen,
aes(x = !!sym(col_explanatory),
y = !!sym(col_response))) +
stat_smooth(method = "lm") +
geom_point() +
labs(x = "x_axis_title",
y = "y_axis_title") +
theme_classic()
# test relationship
lm(formula = reformulate(col_explanatory, col_response),
data = lichen) %>%
summary()
# specify the column that contains your explanatory (independent) variable
col_explanatory <- "bark_ph"
x_axis_title <- "Bark pH"
# specify the column that contains your response (dependent) variable
col_response <- "coverage_total"
y_axis_title <- "total lichen coverage"
# create plot
ggplot(lichen,
aes(x = !!sym(col_explanatory),
y = !!sym(col_response))) +
stat_smooth(method = "lm") +
geom_point() +
labs(x = "x_axis_title",
y = "y_axis_title") +
theme_classic()
# create plot
ggplot(lichen,
aes(x = !!sym(col_explanatory),
y = !!sym(col_response))) +
stat_smooth(method = "lm") +
geom_point() +
labs(x = x_axis_title,
y = y_axis_title) +
theme_classic()
# test relationship
lm(formula = reformulate(col_explanatory, col_response),
data = lichen) %>%
summary()
#| label: fig-side-of-tree
#| fig-cap: "Mean lichen coverage for north, east, west, and south aspect of sampled trees."
#| message: false
#| error: false
#| warning: false
# MODIFY THIS SECTION ----
x_axis_title <- "Tree aspect"
y_axis_title <- "lichen relative abundance"
# DO NOT MAKE MODIFICATIONS BELOW HERE ----
# create tidy data set with coverage by direction
df <- lichen %>%
select(coverage_north, coverage_east, coverage_south, coverage_west) %>%
pivot_longer(names_to = "tree_side", values_to = "coverage", 1:4) %>%
separate(tree_side, into = c("tmp", "direction"), sep = "_") %>%
select(-tmp)
# calculate summary stats
summary <- df %>%
group_by(direction) %>%
summarize(mean = mean(coverage),
sd = sd(coverage))
# create plot
ggplot(summary) +
geom_pointrange(aes(x = direction,
y = mean,
ymin = mean-sd,
ymax = mean+sd,
color = direction),
size = 1.2) +
scale_color_manual(values = colors) +
labs(x = x_axis_title,
y = y_axis_title) +
theme_classic() +
theme(legend.position = "none")
# test relationship
aov(coverage ~ direction,
data = df) %>%
summary()
#| label: fig-cat-continuous-I
#| fig-cap: "Comparison of total lichen coverage per tree for all campus sample locations."
#| message: false
#| error: false
#| warning: false
# MODIFY THIS SECTION ----
# specify the column that contains your explanatory (independent) variable
col_explanatory <- "sample_location"
x_axis_title <- "campus sample location"
# specify the column that contains your response (dependent) variable
col_response <- "coverage_total"
y_axis_title <- "lichen relative abundance"
# DO NOT MAKE MODIFICATIONS BELOW HERE ----
summary <- lichen %>%
group_by(!!sym(col_explanatory)) %>%
summarize(mean = mean(!!sym(col_response)),
sd = sd(!!sym(col_response)))
# create plot
ggplot(summary) +
geom_pointrange(aes(x = !!sym(col_explanatory),
y = mean,
ymin = mean-sd,
ymax = mean+sd,
color = !!sym(col_explanatory)),
size = 1.2) +
scale_color_manual(values = colors) +
labs(x = x_axis_title,
y = y_axis_title) +
theme_classic() +
theme(legend.position = "none")
# test relationship
aov(reformulate(col_explanatory, col_response),
data = lichen) %>%
summary
