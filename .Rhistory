ggplot(germination, aes(x = treatment, fill = germination)) +
geom_bar(stat = "count",
width = .75,
position = position_dodge(.85),
color = "black") +
scale_fill_manual(values = colors) +
labs(x = "Treatment",
y = "Number of Seeds") +
theme_classic() +
theme(legend.position = "bottom")
ggplot(germination, aes(x = treatment, fill = germination)) +
geom_bar(stat = "count",
width = .75,
position = position_dodge(.8),
color = "black") +
scale_fill_manual(values = colors) +
labs(x = "Treatment",
y = "Number of Seeds") +
theme_classic() +
theme(legend.position = "bottom")
# calculate observed statistic
observed_statistic <- germination %>%        # define data to use
specify(response = germination,            # specify response (dependent) variable
explanatory = treatment) %>%       # specify explanatory (independent) variable
hypothesize(null = "independence") %>%     # define null hypothesis
calculate(stat = "Chisq")                  # define test statistic to use
# calculate observed statistic
observed_statistic <- germination %>%        # define data to use
specify(response = germination,            # specify response (dependent) variable
explanatory = treatment,           # specify explanatory (independent) variable
success = "germination") %>%       # specify response that is success
hypothesize(null = "independence") %>%     # define null hypothesis
calculate(stat = "Chisq")                  # define test statistic to use
# calculate observed statistic
observed_statistic <- germination %>%        # define data to use
specify(response = germination,            # specify response (dependent) variable
explanatory = treatment,           # specify explanatory (independent) variable
success = "germinated") %>%       # specify response that is success
hypothesize(null = "independence") %>%     # define null hypothesis
calculate(stat = "Chisq")                  # define test statistic to use
# calculate observed statistic
observed_statistic <- germination %>%        # define data to use
specify(response = germination,            # specify response (dependent) variable
success = "germinated",            # specify response that is success
explanatory = treatment,  ) %>%    # specify explanatory (independent) variable
hypothesize(null = "independence") %>%     # define null hypothesis
calculate(stat = "Chisq",                  # define test statistic to use
order = c("ctrl", "exp"))        # order to subtract explanatory variables
# print test statistic
observed_statistic
# create null distribution
null_dist <- islands %>%
specify(response = species,
explanatory = island) %>%
hypothesize(null = "independence") %>%
generate(reps = 1000,
type = "permute") %>%
calculate(stat = "Chisq")
# create null distribution
null_dist <- islands %>%
specify(response = species,
explanatory = island) %>%
hypothesize(null = "independence") %>%
generate(reps = 1000,
type = "permute") %>%
calculate(stat = "Chisq")
# create null distribution
null_dist <- germination %>%
specify(response = germination,            # specify response (dependent) variable
success = "germinated",            # specify response that is success
explanatory = treatment,  ) %>%    # specify explanatory (independent) variable
hypothesize(null = "independence") %>%     # define null hypothesis
generate(reps = 1000,                      # number of samples to generate null distribution
type = "permute") %>%             # shuffle to break association
calculate(stat = "Chisq",                  # define test statistic to use
order = c("ctrl", "exp"))        # order to subtract explanatory variables
# visualize the null distribution and test statistic!
null_dist %>%
visualize(method = "both") +
shade_p_value(observed_statistic,
direction = "greater")
null_dist %>%
get_p_value(obs_stat = observed_statistic,
direction = "greater")
# define your filename
file <- "seedling-length_demo-1.tsv" # CHANGE THIS TO YOUR EXACT FILENAME, remember R is case sensitive
# read in data
length <- read_delim(here("data", file), delim = "\t") %>%
clean_names()
View(length)
# take a look at first few lines
head(germination)
head(length)
length %>%
group_by(treatment) %>%
summarize(mean = mean(length_mm),
sd = sd(length_mm),
median = median(length_mm),
min = min(length_mm),
max = max(length_mm))
#| label: tbl-summary-length
#| tbl-cap: "Summary statistics for seedling length. Mean, median, standard deviation (sd), minimum (min) and maximum (max) length in millimeters for seedlings exposed to plant X (exp) or not (ctrl)."
length %>%                                # specify data
group_by(treatment) %>%                 # group by treatment
summarize(mean = mean(length_mm),       # calculate mean
sd = sd(length_mm),           # calculate standard deviation
median = median(length_mm),   # determine median value
min = min(length_mm),         # determine minimum value
max = max(length_mm))         # determine maximum value
ggplot(length, aes(x = length_mm, color = fill)) +
geom_histogram(binwidth = 0.5,
color = "black") +
theme_classic()
ggplot(length, aes(x = length_mm, color = fill)) +
geom_histogram(binwidth = 1,
color = "black") +
theme_classic()
ggplot(length, aes(x = length_mm, fill = treatment)) +
geom_histogram(binwidth = 1,
color = "black") +
theme_classic()
ggplot(length, aes(x = length_mm, fill = treatment)) +
geom_histogram(binwidth = 1,
color = "black") +
facet_grid(treatment ~ .) +
theme_classic()
ggplot(length, aes(x = length_mm, fill = treatment)) +
geom_histogram(binwidth = 1,
color = "black") +
facet_grid(treatment ~ .) +
scale_fill_manual(values = color) +
theme_classic()
#| label: fig-length-histogram
#| fig-cap: "Seedling length distribution after 1 week for radish seeds explosed to plant X (green) and not (orange)."
ggplot(length, aes(x = length_mm, fill = treatment)) +
geom_histogram(binwidth = 1,
color = "black") +
facet_grid(treatment ~ .) +
scale_fill_manual(values = color) +
theme_classic() +
theme(legend.position = "bottom")
ggplot(length, aes(x = length_mm, fill = treatment)) +
geom_histogram(binwidth = 1,
color = "black") +
facet_grid(treatment ~ .) +
scale_fill_manual(values = colors) +
theme_classic() +
theme(legend.position = "bottom")
ggplot(length, aes(x = length_mm, fill = treatment)) +
geom_histogram(binwidth = 1,
color = "black") +
geom_vline(aes(mean(length_mm)))
ggplot(length, aes(x = length_mm, fill = treatment)) +
geom_histogram(binwidth = 1,
color = "black") +
geom_vline(xintercept = aes(mean(length_mm))) +
facet_grid(treatment ~ .) +
scale_fill_manual(values = colors) +
theme_classic() +
theme(legend.position = "bottom")
ggplot(length, aes(x = length_mm, fill = treatment)) +
geom_histogram(binwidth = 1,
color = "black") +
geom_vline(aes(xintercept = mean(length_mm))) +
facet_grid(treatment ~ .) +
scale_fill_manual(values = colors) +
theme_classic() +
theme(legend.position = "bottom")
ggplot(length, aes(x = length_mm, fill = treatment)) +
geom_histogram(binwidth = 1,
color = "black") +
geom_vline(aes(xintercept = mean(length_mm), group = treatment)) +
facet_grid(treatment ~ .) +
scale_fill_manual(values = colors) +
theme_classic() +
theme(legend.position = "bottom")
#| label: fig-length-histogram
#| fig-cap: "Seedling length distribution after 1 week for radish seeds explosed to plant X (green) and not (orange)."
ggplot(length, aes(x = length_mm, fill = treatment)) +
geom_histogram(binwidth = 1,
color = "black") +
facet_grid(treatment ~ .) +
scale_fill_manual(values = colors) +
theme_classic() +
theme(legend.position = "bottom")
# create dataframe with mean and sd
summary <- length %>%
group_by(treatment) %>%
summarise(mean = mean(length_mm),
sd = sd(length_mm))
summary
ggplot(summary) +
geom_bar(aes(x = treatment, y = mean,
fill = treatment),
stat = "identity") +
geom_errorbar(aes(x = treatment,
ymin = mean-sd,
ymax = mean+sd),
width = 0.4,
size = 1.3)
ggplot(summary) +
geom_bar(aes(x = treatment, y = mean,
fill = treatment),
stat = "identity") +
geom_errorbar(aes(x = treatment,
ymin = mean-sd,
ymax = mean+sd),
width = 0.4,
size = 1.3) +
scale_fill_manual(values = colors) +
theme_classic() +
theme(legend.position = "none")
ggplot(summary) +
geom_bar(aes(x = treatment, y = mean,
fill = treatment),
stat = "identity",
color = "black") +
geom_errorbar(aes(x = treatment,
ymin = mean-sd,
ymax = mean+sd),
width = 0.25,
size = 1.3) +
scale_fill_manual(values = colors) +
theme_classic() +
theme(legend.position = "none")
ggplot(summary) +
geom_bar(aes(x = treatment, y = mean,
fill = treatment),
stat = "identity",
color = "black") +
geom_errorbar(aes(x = treatment,
ymin = mean-sd,
ymax = mean+sd),
width = 0.25,
size = 1.2) +
scale_fill_manual(values = colors) +
theme_classic() +
theme(legend.position = "none")
ggplot(summary) +
geom_errorbar(aes(x = treatment,
y = mean,
ymin = mean-sd,
ymax = mean+sd),
width = 0.25,
size = 1.2) +
scale_fill_manual(values = colors) +
theme_classic() +
theme(legend.position = "none")
ggplot(summary) +
geom_pointrange(aes(x = treatment,
y = mean,
ymin = mean-sd,
ymax = mean+sd),
width = 0.25,
size = 1.2) +
scale_fill_manual(values = colors) +
theme_classic() +
theme(legend.position = "none")
ggplot(summary) +
geom_pointrange(aes(x = treatment,
y = mean,
ymin = mean-sd,
ymax = mean+sd),
width = 0.25,
size = 1.2) +
scale_color_manual(values = colors) +
theme_classic() +
theme(legend.position = "none")
ggplot(summary) +
geom_pointrange(aes(x = treatment,
y = mean,
ymin = mean-sd,
ymax = mean+sd),
size = 1.2) +
scale_color_manual(values = colors) +
theme_classic() +
theme(legend.position = "none")
ggplot(summary) +
geom_pointrange(aes(x = treatment,
y = mean,
ymin = mean-sd,
ymax = mean+sd,
color = treatment),
size = 1.2) +
scale_color_manual(values = colors) +
theme_classic() +
theme(legend.position = "none")
#| label: fig-length-point
#| fig-cap: "Mean seedling length and standard deviation after 1 week for radish seeds explosed to plant X (green) and not (orange)."
# create dataframe with mean and sd
summary <- length %>%
group_by(treatment) %>%
summarise(mean = mean(length_mm),
sd = sd(length_mm))
# create dataframe with mean and sd
summary <- length %>%
group_by(treatment) %>%
summarise(mean = mean(length_mm),
sd = sd(length_mm))
ggplot(summary) +
geom_pointrange(aes(x = treatment,
y = mean,
ymin = mean-sd,
ymax = mean+sd,
color = treatment),
size = 1.2) +
scale_color_manual(values = colors) +
theme_classic() +
theme(legend.position = "none")
ggplot(summary) +
geom_pointrange(aes(x = treatment,
y = mean,
ymin = mean-sd,
ymax = mean+sd,
color = treatment),
size = 1.2) +
scale_color_manual(values = colors) +
theme_classic() +
theme(legend.position = "none") +
coord_flip()
#| include: false
# load libraries for reporting
library(knitr)
# load libraries for data import
library(readr)
library(here)
library(janitor)
# load libraries for data wrangling
library(dplyr)
library(tidyr)
library(tibble)
# load libraries for plotting
library(ggplot2)
library(ggthemes)
# load library for stats
library(infer)
# load dataset
library(palmerpenguins)
#| label: read-germination-data
# define your filename
file <- "germination_demo-1.tsv" # CHANGE THIS TO YOUR EXACT FILENAME, remember R is case sensitive
# read in data
germination <- read_delim(here("data", file), delim = "\t") %>%
clean_names()
# take a look at first few lines
head(germination)
#| label: tbl-germination-success
#| tbl-cap: "Summary of germination success after 48 hrs. Total number (n) and percent of seeds that germinated."
germination %>%
group_by(treatment) %>%             # group data by treatment
count(germination) %>%              # count number seeds germinated
mutate(percent = n/sum(n)*100) %>%
kable(digits = 2)
#| label: fig-germination-success
#| fig-cap: "Germination success of radish seeds exposed to odiferous plant material. Number of seeds that germinated (orange) and did not germinate (green) after 48 hours for control (ctrl; no exposure) and experimental treatment (exp)."
# pick two colors for your control and experimental treatment
colors <- c("darkorange", "cyan4")
ggplot(germination, aes(x = treatment,          # specify categories on x axis
fill = germination)) +  # specify how to group data
geom_bar(stat = "count",                      # length of bar indicates number of observations
width = .75,                         # space between groups
position = position_dodge(.8),       # space between bars in group
color = "black") +                   # line color
scale_fill_manual(values = colors) +          # use custom colors
labs(x = "Treatment",                         # x-axis title
y = "Number of Seeds") +                 # y-axis title
theme_classic() +                             # specify theme
theme(legend.position = "bottom")             # place legend under figure
# calculate observed statistic
observed_statistic <- germination %>%        # define data to use
specify(response = germination,            # specify response (dependent) variable
success = "germinated",            # specify response that is success
explanatory = treatment,  ) %>%    # specify explanatory (independent) variable
hypothesize(null = "independence") %>%     # define null hypothesis
calculate(stat = "Chisq",                  # define test statistic to use
order = c("ctrl", "exp"))        # order to subtract explanatory variables
# print test statistic
observed_statistic
# create null distribution
null_dist <- germination %>%
specify(response = germination,            # specify response (dependent) variable
success = "germinated",            # specify response that is success
explanatory = treatment,  ) %>%    # specify explanatory (independent) variable
hypothesize(null = "independence") %>%     # define null hypothesis
generate(reps = 1000,                      # number of samples to generate null distribution
type = "permute") %>%             # shuffle to break association
calculate(stat = "Chisq",                  # define test statistic to use
order = c("ctrl", "exp"))        # order to subtract explanatory variables
# visualize null distribution test statistic
null_dist %>%
visualize(method = "both") +
shade_p_value(observed_statistic,
direction = "greater")
#| label: calculate-p
# obtain p-value
null_dist %>%
get_p_value(obs_stat = observed_statistic,
direction = "greater")
#| label: calculate-p
# obtain p-value
null_dist %>%
get_p_value(obs_stat = observed_statistic,
direction = "greater")
#| label: read-seedling-length-data
# define your filename
file <- "seedling-length_demo-1.tsv" # CHANGE THIS TO YOUR EXACT FILENAME, remember R is case sensitive
# read in data
length <- read_delim(here("data", file), delim = "\t") %>%
clean_names()
# take a look at first few lines
head(length)
#| label: tbl-summary-length
#| tbl-cap: "Summary statistics for seedling length. Mean, median, standard deviation (sd), minimum (min) and maximum (max) length in millimeters for seedlings exposed to plant X (exp) or not (ctrl)."
length %>%                                # specify data
group_by(treatment) %>%                 # group by treatment
summarize(mean = mean(length_mm),       # calculate mean
sd = sd(length_mm),           # calculate standard deviation
median = median(length_mm),   # determine median value
min = min(length_mm),         # determine minimum value
max = max(length_mm))         # determine maximum value
#| label: fig-length-histogram
#| fig-cap: "Seedling length distribution after 1 week for radish seeds explosed to plant X (green) and not (orange)."
ggplot(length, aes(x = length_mm, fill = treatment)) +
geom_histogram(binwidth = 1,
color = "black") +
facet_grid(treatment ~ .) +
scale_fill_manual(values = colors) +
theme_classic() +
theme(legend.position = "none")
#| label: fig-length-bar
#| fig-cap: "Mean seedling length and standard deviation after 1 week for radish seeds explosed to plant X (green) and not (orange)."
# create dataframe with mean and sd
summary <- length %>%
group_by(treatment) %>%
summarise(mean = mean(length_mm),
sd = sd(length_mm))
ggplot(summary) +
geom_bar(aes(x = treatment, y = mean,
fill = treatment),
stat = "identity",
color = "black") +
geom_errorbar(aes(x = treatment,
ymin = mean-sd,
ymax = mean+sd),
width = 0.25,
size = 1.2) +
scale_fill_manual(values = colors) +
theme_classic() +
theme(legend.position = "none")
#| label: fig-length-point
#| fig-cap: "Mean seedling length and standard deviation after 1 week for radish seeds explosed to plant X (green) and not (orange)."
# create dataframe with mean and sd
summary <- length %>%
group_by(treatment) %>%
summarise(mean = mean(length_mm),
sd = sd(length_mm))
# create dataframe with mean and sd
summary <- length %>%
group_by(treatment) %>%
summarise(mean = mean(length_mm),
sd = sd(length_mm))
ggplot(summary) +
geom_pointrange(aes(x = treatment,
y = mean,
ymin = mean-sd,
ymax = mean+sd,
color = treatment),
size = 1.2) +
scale_color_manual(values = colors) +
theme_classic() +
theme(legend.position = "none")
# calculate observed statistic
observed_statistic <- length %>%             # define data to use
specify(response = length_mm,              # specify response (dependent) variable
explanatory = treatment,  ) %>%    # specify explanatory (independent) variable
calculate(stat = "diff in means",          # define test statistic to use
order = c("ctrl", "exp"))        # order to subtract explanatory variables
# print test statistic
observed_statistic
# create null distribution
null_dist <- germination %>%
specify(response = length_mm,              # specify response (dependent) variable
explanatory = treatment,  ) %>%    # specify explanatory (independent) variable
hypothesize(null = "independence") %>%     # define null hypothesis
generate(reps = 1000,                      # number of samples to generate null distribution
type = "permute") %>%             # shuffle to break association
calculate(stat = "diff in means",          # define test statistic to use
order = c("ctrl", "exp"))        # order to subtract explanatory variables
# create null distribution
null_dist <- length %>%
specify(response = length_mm,              # specify response (dependent) variable
explanatory = treatment,  ) %>%    # specify explanatory (independent) variable
hypothesize(null = "independence") %>%     # define null hypothesis
generate(reps = 1000,                      # number of samples to generate null distribution
type = "permute") %>%             # shuffle to break association
calculate(stat = "diff in means",          # define test statistic to use
order = c("ctrl", "exp"))        # order to subtract explanatory variables
# visualize null distribution test statistic
null_dist %>%
visualize(method = "both") +
shade_p_value(observed_statistic,
direction = "greater")
# visualize null distribution test statistic
null_dist %>%
visualize() +
shade_p_value(observed_statistic,
direction = "greater")
#| label: calculate-p-II
# obtain p-value
null_dist %>%
get_p_value(obs_stat = observed_statistic,
direction = "greater")
